services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: alienworlds-pools
    networks:
      - monitoring
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app

    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    networks:
      - monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=240y'  # Храним данные только за 24 часа для экономии ресурсов
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
    depends_on:
      - app

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./secrets:/run/secrets:ro
    environment:
      - GF_SECURITY_ADMIN_USER__FILE=/run/secrets/grafana_admin_user.txt
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password.txt
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=100ms
      # - GF_SERVER_ROOT_URL=https://YOUR_DOMAIN
      # - GF_SERVER_DOMAIN=YOUR_DOMAIN
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
    depends_on:
      - prometheus

  caddy:
    image: caddy:alpine
    container_name: caddy
    networks:
      - monitoring
    ports:
      # локально открываем 8080 (HTTP). В проде используем 80/443
      - "${DOMAIN:-}:80"
      - "${DOMAIN:-}:443"
      - "8080:8080"
    environment:
      - DOMAIN=${DOMAIN}
      - ACME_AGREE=true
      - EMAIL=${ACME_EMAIL:-admin@example.com}
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - grafana

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  caddy_data:
  caddy_config: